#!/bin/bash
#
# repodump - Extract and format Git repository or directory contents for sharing with LLMs
#

# Default Settings
FORMAT="markdown"
INCLUDE_REPO_DETAILS=true
ESTIMATE_TOKENS=false
# USE_CLIPBOARD=false # Removed
INCLUDE_HIDDEN=false
DEBUG_MODE=false
DRY_RUN=false
VERSION="0.1.1-alpha"
TARGET_DIR="."
IGNORE_PATTERNS=()
INCLUDE_PATTERNS=() # Added for --include

# Function for debug output
debug() {
  if [ "$DEBUG_MODE" = true ]; then
    echo "Debug: $1" >&2
  fi
}

# Function Definitions
show_help() {
  cat << EOF
repodump v${VERSION} - Extract and format repository or directory contents for LLMs

Usage: repodump [options] [path/to/directory]

Options:
  --format=FORMAT        Set output format: 'markdown' (default) or 'text'
  --no-repo-details      Exclude repository details (branch, commit, status)
  --estimate-tokens      Estimate token count instead of generating full output
  # --clipboard            Copy output to system clipboard # Removed
  --include-hidden       Include hidden files in normal directories
  --include=PATTERN      Include files matching the glob pattern (can be used multiple times)
  --exclude=PATTERN      Exclude files matching the glob pattern (can be used multiple times)
  --debug                Enable detailed debug output
  --dry-run              Show which files would be included without generating output
  --help                 Display this help message
  --version              Display version information

Examples:
  repodump                               # Process current directory
  repodump ~/projects/my-repo          # Process specific directory
  repodump --include="*.py" --exclude="test_*" # Include Python files, exclude tests
  repodump --estimate-tokens           # Estimate token count
  repodump --format=text               # Use plain text format
  repodump --dry-run                   # Preview which files would be included
EOF
  exit 0
}

show_version() {
  echo "repodump v${VERSION}"
  exit 0
}

is_git_repo() {
  [ -d "$1/.git" ] && return 0 || return 1
}

list_files() {
  local dir="$1"
  local include_hidden="$2"
  
  # Ensure directory exists before running git or find
  if [ ! -d "$dir" ]; then
    echo "Error: Directory '$dir' not found in list_files." >&2
    return 1
  fi
  
  if is_git_repo "$dir"; then
    debug "Listing files via git in '$dir'"
    # Use git ls-files, making sure we get both tracked and untracked files
    # The --others flag adds untracked files
    (cd "$dir" && git ls-files --cached --others --exclude-standard)
  elif [ "$include_hidden" = true ]; then
    debug "Listing all files (including hidden) via find in '$dir'"
    # Find all files, excluding .git directory contents explicitly
    find "$dir" -type f -not -path "$dir/.git/*" | sed "s|^$dir/||" | sort
  else
    debug "Listing non-hidden files via find in '$dir'"
    # Find non-hidden files, excluding .git directory contents explicitly
    find "$dir" -type f -not -path '*/\.*' -not -path "$dir/.git/*" | sed "s|^$dir/||" | sort
  fi
}

is_binary() {
  local file="$1"
  
  # First, check if the 'file' command exists
  if command -v file >/dev/null 2>&1; then
    # Use 'file' command which is more reliable for detecting binary files
    local result=$(file -b --mime-type "$file")
    if [[ "$result" == "text/"* || "$result" == "application/json" || "$result" == "application/xml" ]]; then
      # It's a text file
      return 1
    else
      # Might be binary - do additional check for script files
      local first_line=$(head -n 1 "$file" 2>/dev/null)
      if [[ "$first_line" == "#!"* ]]; then
        # It's a script file (has shebang)
        return 1
      else
        debug "File '$file' detected as binary (MIME type: $result)"
        return 0
      fi
    fi
  else
    # Fallback to basic null byte check if 'file' command is not available
    debug "Using fallback null byte check for '$file'"
    # Check the first 512 bytes for null bytes. Run the command then check status.
    head -c 512 "$file" 2>/dev/null | grep -q $'\0'
    if [ $? -eq 0 ]; then # Check the exit status of the pipeline
      debug "File '$file' contains null bytes - marked as binary (fallback)"
      return 0 # Contains null byte, is binary
    else
      return 1 # No null byte found, treat as text
    fi
  fi
}

read_ignore_file() {
  local dir="$1"
  local found_repodumpignore=false
  
  # Check for .repodumpignore in directory
  if [ -f "$dir/.repodumpignore" ]; then
    debug "Found .repodumpignore file in $dir"
    
    local count=0
    # Read file line by line, ensuring we handle line endings correctly
    while IFS= read -r pattern || [ -n "$pattern" ]; do
      # Trim whitespace and skip empty/comment lines
      pattern=$(echo "$pattern" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
      
      # If line is not empty and not a comment, add it to patterns
      if [[ -n "$pattern" && ! "$pattern" =~ ^# ]]; then
        IGNORE_PATTERNS+=("$pattern")
        count=$((count + 1))
        debug "Added ignore pattern: '$pattern'"
      fi
    done < "$dir/.repodumpignore"
    debug "Loaded $count patterns from .repodumpignore"
    found_repodumpignore=true
  else
    debug "No .repodumpignore file found in $dir"
  fi
  
  # Check for global ignore file
  if [ -f "$HOME/.config/repodump/ignore" ]; then
    debug "Found global ignore file in $HOME/.config/repodump/ignore"
    local count=0
    while IFS= read -r pattern || [ -n "$pattern" ]; do
      pattern=$(echo "$pattern" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
      if [[ -n "$pattern" && ! "$pattern" =~ ^# ]]; then
        IGNORE_PATTERNS+=("$pattern")
        count=$((count + 1))
        debug "Added global ignore pattern: '$pattern'"
      fi
    done < "$HOME/.config/repodump/ignore"
    debug "Loaded $count patterns from global ignore file"
  fi
  
  # If no local .repodumpignore found, use .gitignore if present (only if not a git repo where ls-files handles it)
  if [ "$found_repodumpignore" = false ] && ! is_git_repo "$dir" && [ -f "$dir/.gitignore" ]; then
     echo "Using .gitignore for exclusions as .repodumpignore was not found." >&2
     local count=0
     while IFS= read -r pattern || [ -n "$pattern" ]; do
       pattern=$(echo "$pattern" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
       if [[ -n "$pattern" && ! "$pattern" =~ ^# ]]; then
         IGNORE_PATTERNS+=("$pattern")
         count=$((count + 1))
         debug "Added gitignore pattern: '$pattern'"
       fi
     done < "$dir/.gitignore"
     debug "Loaded $count patterns from .gitignore"
   fi
}

should_exclude() {
  local rel_path="$1" # Path relative to TARGET_DIR
  
  for pattern in "${IGNORE_PATTERNS[@]}"; do
    # Handle special cases for different pattern types
    
    # 1. Directory match with trailing slash (e.g., "build/")
    if [[ "$pattern" == */ ]]; then
      if [[ "$rel_path" == ${pattern}* ]]; then
        debug "MATCH - '$rel_path' matches directory pattern '$pattern'"
        return 0
      fi
    # 2. File extension match (e.g., "*.rb")
    elif [[ "$pattern" == \*.* ]]; then
      # Extract the extension from the pattern (e.g., ".rb" from "*.rb")
      local ext_pattern="${pattern#\*.}"
      # Check if the file path ends with that extension
      if [[ "$rel_path" == *".$ext_pattern" ]]; then
        debug "MATCH - '$rel_path' matches extension pattern '$pattern'"
        return 0
      fi
    # 3. Glob pattern with * anywhere
    elif [[ "$pattern" == *\** ]]; then
      # Use case pattern matching for globs
      case "$rel_path" in
        $pattern)
          debug "MATCH - '$rel_path' matches glob pattern '$pattern'"
          return 0
          ;;
      esac
    # 4. Exact match or directory prefix
    elif [[ "$rel_path" == "$pattern" || "$rel_path" == "$pattern"/* ]]; then
      debug "MATCH - '$rel_path' matches exact or prefix pattern '$pattern'"
      return 0
    fi
  done
  
  return 1 # No match found
}

should_include() {
    local rel_path="$1" # Path relative to TARGET_DIR

    # If no include patterns are specified, include everything by default
    if [ ${#INCLUDE_PATTERNS[@]} -eq 0 ]; then
        return 0
    fi

    # If include patterns exist, the file must match at least one
    for pattern in "${INCLUDE_PATTERNS[@]}"; do
        # Simple glob matching for now
        if [[ "$rel_path" == $pattern ]]; then
            debug "INCLUDING '$rel_path' matches include pattern '$pattern'"
            return 0
        fi
        # Handle directory pattern (include everything in the directory)
        if [[ "$pattern" == */ ]]; then
            if [[ "$rel_path" == ${pattern}* ]]; then
                debug "INCLUDING '$rel_path' matches directory include pattern '$pattern'"
                return 0
            fi
        fi
        # Handle extension pattern (e.g., "*.py")
        if [[ "$pattern" == \*.* ]]; then
            local ext_pattern="${pattern#\*.}"
            if [[ "$rel_path" == *".$ext_pattern" ]]; then
                debug "INCLUDING '$rel_path' matches extension include pattern '$pattern'"
                return 0
            fi
        fi
    done

    # If patterns exist but none matched, exclude the file
    return 1
}

get_repo_details() {
  local dir="$1"
  local branch commit message status
  
  if ! is_git_repo "$dir"; then
    return 1 # Return non-zero status
  fi
  
  # Check if git command exists
  if ! command -v git &> /dev/null; then
      echo "Warning: git command not found. Cannot retrieve repository details." >&2
      return 1
  fi
  
  branch=$(git -C "$dir" rev-parse --abbrev-ref HEAD 2>/dev/null || echo "unknown")
  commit=$(git -C "$dir" rev-parse --short HEAD 2>/dev/null || echo "unknown")
  # Get only the first line of the commit message
  message=$(git -C "$dir" log -1 --pretty=%s 2>/dev/null || echo "unknown") # %s for subject line
  
  if [ -z "$(git -C "$dir" status --porcelain=v1 2>/dev/null)" ]; then # Use v1 for stability
    status="clean"
  else
    status="modified"
  fi
  
  # Only output if we actually got details
  if [[ -n "$branch" && -n "$commit" ]]; then
      if [ "$FORMAT" = "markdown" ]; then
        echo "## Repository Details"
        echo "- **Branch:** ${branch}"
        echo "- **Latest Commit:** ${commit} "${message}""
        echo "- **Status:** ${status}"
        echo "" # Add a newline for spacing
      else
        echo "REPOSITORY DETAILS"
        echo "Branch: ${branch}"
        echo "Latest Commit: ${commit} "${message}""
        echo "Status: ${status}"
        echo "--------------------------"
        echo "" # Add a newline for spacing
      fi
      return 0 # Success
  else
      echo "Warning: Failed to retrieve some git repository details." >&2
      return 1 # Failure
  fi
}

# Improved function to determine language based on file extension and shebang
determine_language() {
  local file="$1"
  local extension
  local language=""
  
  # Check if file has an extension
  if [[ "$file" == *.* ]]; then
    # Get lowercased extension using portable tr
    extension="${file##*.}"
    extension=$(echo "$extension" | tr '[:upper:]' '[:lower:]')
    
    case "$extension" in
      js|ts|jsx|tsx) language="javascript" ;;
      py) language="python" ;;
      rb) language="ruby" ;;
      go) language="go" ;;
      rs) language="rust" ;;
      java) language="java" ;;
      c|cpp|cc|cxx) language="cpp" ;;
      h|hpp|hxx) language="cpp" ;;
      sh|bash|zsh) language="bash" ;;
      ps1) language="powershell" ;;
      md|markdown) language="markdown" ;;
      html|htm) language="html" ;;
      css) language="css" ;;
      scss|sass) language="scss" ;;
      less) language="less" ;;
      json) language="json" ;;
      xml) language="xml" ;;
      yaml|yml) language="yaml" ;;
      toml) language="toml" ;;
      sql) language="sql" ;;
      php) language="php" ;;
      pl|pm) language="perl" ;;
      swift) language="swift" ;;
      kt|kts) language="kotlin" ;;
      dart) language="dart" ;;
      ex|exs) language="elixir" ;;
      hs|lhs) language="haskell" ;;
      scala) language="scala" ;;
      lua) language="lua" ;;
      groovy) language="groovy" ;;
      dockerfile|containerfile) language="dockerfile" ;;
      tf) language="terraform" ;;
    esac
  fi
  
  # If no language determined by extension, try shebang detection for extensionless files
  if [ -z "$language" ]; then
    # Read the first line to check for shebang
    local first_line=$(head -n 1 "$file" 2>/dev/null)
    
    if [[ "$first_line" == "#!/bin/bash"* || "$first_line" == "#!/usr/bin/bash"* || 
          "$first_line" == "#!/bin/sh"* || "$first_line" == "#!/usr/bin/sh"* ||
          "$first_line" == "#!/bin/zsh"* ]]; then
      language="bash"
      debug "Detected bash script from shebang: $file"
    elif [[ "$first_line" == "#!/usr/bin/env bash"* || "$first_line" == "#!/usr/bin/env sh"* ||
            "$first_line" == "#!/usr/bin/env zsh"* ]]; then
      language="bash"
      debug "Detected bash script from env shebang: $file"
    elif [[ "$first_line" == "#!/usr/bin/python"* || "$first_line" == "#!/bin/python"* ]]; then
      language="python"
      debug "Detected Python script from shebang: $file"
    elif [[ "$first_line" == "#!/usr/bin/env python"* ]]; then
      language="python"
      debug "Detected Python script from env shebang: $file"
    elif [[ "$first_line" == "#!/usr/bin/ruby"* || "$first_line" == "#!/bin/ruby"* ]]; then
      language="ruby"
      debug "Detected Ruby script from shebang: $file"
    elif [[ "$first_line" == "#!/usr/bin/env ruby"* ]]; then
      language="ruby"
      debug "Detected Ruby script from env shebang: $file"
    elif [[ "$first_line" == "#!/usr/bin/perl"* || "$first_line" == "#!/bin/perl"* ]]; then
      language="perl"
      debug "Detected Perl script from shebang: $file"
    elif [[ "$first_line" == "#!/usr/bin/env perl"* ]]; then
      language="perl"
      debug "Detected Perl script from env shebang: $file"
    elif [[ "$first_line" == "#!/usr/bin/node"* || "$first_line" == "#!/bin/node"* ]]; then
      language="javascript"
      debug "Detected JavaScript from shebang: $file"
    elif [[ "$first_line" == "#!/usr/bin/env node"* ]]; then
      language="javascript"
      debug "Detected JavaScript from env shebang: $file"
    fi
  fi
  
  echo "$language"
}

# Function to run in dry-run mode
dry_run_output() {
  local dir="$1"
  shift
  local files=("$@")
  
  echo "== DRY RUN MODE: Files that would be included =="
  echo "Target directory: $dir"
  echo "Total files to be included: ${#files[@]}"
  echo ""
  
  # Display repo details if applicable
  if [ "$INCLUDE_REPO_DETAILS" = true ] && is_git_repo "$dir"; then
    echo "Git Repository:"
    local branch=$(git -C "$dir" rev-parse --abbrev-ref HEAD 2>/dev/null || echo "unknown")
    local commit=$(git -C "$dir" rev-parse --short HEAD 2>/dev/null || echo "unknown")
    local status=$([ -z "$(git -C "$dir" status --porcelain=v1 2>/dev/null)" ] && echo "clean" || echo "modified")
    echo "- Branch: $branch"
    echo "- Latest Commit: $commit"
    echo "- Status: $status"
    echo ""
  fi
  
  echo "Files to be included:"
  for file in "${files[@]}"; do
    local rel_path="${file#$dir/}"
    local language=$(determine_language "$file")
    local size=$(wc -c < "$file" 2>/dev/null || echo "unknown")
    echo "- $rel_path (${language:-unknown}, $size bytes)"
  done
  
  echo ""
  echo "== End of Dry Run Summary =="
}

format_output() {
  local dir="$1"
  shift # Remove the first argument (dir)
  local files=("$@") # Capture the remaining arguments as the files array
  
  # Add repository details if applicable and successful
  if [ "$INCLUDE_REPO_DETAILS" = true ]; then
      repo_details_output=$(get_repo_details "$dir")
      if [ $? -eq 0 ]; then
          echo "$repo_details_output"
      fi
  fi
  
  # Process each file
  for file in "${files[@]}"; do
    # Ensure file still exists before processing
    if [ ! -f "$file" ]; then
      continue
    fi
    
    local rel_path="${file#$dir/}"
    local language=$(determine_language "$file")
    
    if [ "$FORMAT" = "markdown" ]; then
      echo "## FILE: ${rel_path}"
      echo -n '```' # Use -n to avoid extra newline before language hint
      # Only add language hint if determine_language returned something
      if [ -n "$language" ]; then
          echo "$language"
      else
          echo "" # Just start the code block
      fi
      # Check if file is empty before catting
      if [ -s "$file" ]; then # Check if file has size > 0
           cat "$file" # Stream file content directly
      else
           echo "# File is empty" # Indicate empty file
      fi
      echo '```'
      echo "" # Add a newline for spacing
    else # text format
      echo "FILE: ${rel_path}"
      echo "--------------------------"
      # Check if file is empty before catting
      if [ -s "$file" ]; then # Check if file has size > 0
          cat "$file" # Stream file content directly
      else
          echo "# File is empty" # Indicate empty file
      fi
      echo "" # Add a newline
      echo "--------------------------"
      echo "" # Add a newline for spacing
    fi
  done
}

estimate_tokens() {
  shift # Remove the first argument (dir, though not used here, passed for consistency)
  local files=("$@") # Capture the remaining arguments as the files array
  local total=0
  local missing_files=0
  
  # Check availability of ttok or wc
   local counter_cmd=""
   if command -v ttok >/dev/null 2>&1; then
       counter_cmd="ttok"
   elif command -v wc >/dev/null 2>&1; then
       counter_cmd="wc -w"
   else
       echo "Error: Neither 'ttok' nor 'wc' command found. Cannot estimate tokens." >&2
       exit 1
   fi
  
  if [ "$counter_cmd" = "ttok" ]; then
    for file in "${files[@]}"; do
       if [ -f "$file" ]; then
           count=$(cat "$file" | ttok)
           total=$((total + count))
       else
           missing_files=$((missing_files + 1))
       fi
    done
    echo "Estimated token count: $total"
  else # Use wc -w
    for file in "${files[@]}"; do
       if [ -f "$file" ]; then
           count=$(wc -w < "$file")
           total=$((total + count))
       else
           missing_files=$((missing_files + 1))
       fi
    done
    echo "Estimated token count: $total"
    echo "(Note: For potentially more accurate token counting, consider installing 'ttok': pip install ttok or brew install simonw/llm/ttok)" >&2 # Direct warning to stderr
  fi
  
  if [ "$missing_files" -gt 0 ]; then
       echo "Warning: Skipped $missing_files files that disappeared during processing." >&2
   fi
}

# Parse command-line options
while [ $# -gt 0 ]; do
  case "$1" in
    --help)
      show_help
      ;;
    --version)
      show_version
      ;;
    --format=*)
      FORMAT="${1#*=}"
      if [[ "$FORMAT" != "markdown" && "$FORMAT" != "text" ]]; then
        echo "Error: Invalid format specified: '$FORMAT'. Choose 'markdown' or 'text'." >&2
        exit 1
      fi
      shift
      ;;
    --no-repo-details)
      INCLUDE_REPO_DETAILS=false
      shift
      ;;
    --estimate-tokens)
      ESTIMATE_TOKENS=true
      shift
      ;;
    # --clipboard) # Removed
    #   USE_CLIPBOARD=true # Removed
    #   shift # Removed
    #   ;; # Removed
    --include-hidden)
      INCLUDE_HIDDEN=true
      shift
      ;;
    --include=*)
      INCLUDE_PATTERNS+=("${1#*=}")
      shift
      ;;
    --exclude=*)
      IGNORE_PATTERNS+=("${1#*=}") # Add directly to ignore patterns
      shift
      ;;
    --debug)
      DEBUG_MODE=true
      shift
      ;;
    --dry-run)
      DRY_RUN=true
      shift
      ;;
    -*)
      echo "Error: Unknown option: $1" >&2
      echo "Use '--help' for usage information." >&2
      exit 1
      ;;
    *)
      # Handle case where target dir might be provided multiple times
      if [ "$TARGET_DIR" != "." ] && [ -n "$TARGET_DIR" ]; then
           echo "Error: Target directory specified more than once ('$TARGET_DIR' and '$1')." >&2
           exit 1
       fi
      TARGET_DIR="$1"
      shift
      ;;
  esac
done

# Validate target directory
if [ ! -d "$TARGET_DIR" ]; then
  echo "Error: Directory '$TARGET_DIR' not found or is not a directory." >&2
  exit 1
fi
if [ ! -r "$TARGET_DIR" ]; then
    echo "Error: Directory '$TARGET_DIR' is not readable." >&2
    exit 1
fi

# Convert to absolute path AFTER validation
TARGET_DIR=$(cd "$TARGET_DIR" && pwd)
if [ $? -ne 0 ]; then
    echo "Error: Failed to resolve absolute path for '$TARGET_DIR'." >&2
    exit 1
fi

# Read ignore patterns from files (respecting .repodumpignore > .gitignore if applicable)
read_ignore_file "$TARGET_DIR"

# List initial set of files based on directory type and hidden flag
all_files=()
if command -v readarray >/dev/null 2>&1; then
    # Use mapfile (readarray) for efficiency in Bash 4+
    readarray -t all_files < <(list_files "$TARGET_DIR" "$INCLUDE_HIDDEN")
    if [ $? -ne 0 ]; then
        echo "Error: Failed to list files using readarray in '$TARGET_DIR'." >&2
        exit 1
    fi
else
    # Fallback for older Bash versions or shells without readarray
    while IFS= read -r line || [[ -n "$line" ]]; do # Handle lines with or without trailing newline
        all_files+=("$line")
    done < <(list_files "$TARGET_DIR" "$INCLUDE_HIDDEN")
    # Simple check if the array remains empty when it shouldn't.
    if [ $? -ne 0 ] && [ ${#all_files[@]} -eq 0 ]; then
         echo "Error: Failed to list files using while loop in '$TARGET_DIR'." >&2
         exit 1
     fi
fi

debug "Found ${#all_files[@]} files initially"

# Filter files based on include/exclude patterns and binary check
valid_files=()
for rel_path in "${all_files[@]}"; do
  # Ensure relative path is not empty
   if [ -z "$rel_path" ]; then
       continue
   fi

  full_path="$TARGET_DIR/$rel_path"
  
  debug "Processing $rel_path"

  # Skip if file no longer exists
  if [ ! -f "$full_path" ]; then
    debug "Skipping '$rel_path' as it does not exist or is not a file."
    continue
  fi

  # 1. Check include patterns first (if any)
  if ! should_include "$rel_path"; then
      debug "Skipping '$rel_path' - did not match include patterns."
      continue
  fi

  # 2. Check exclude patterns (from files and --exclude flags)
  if should_exclude "$rel_path"; then
      debug "Skipping '$rel_path' - matched exclude patterns."
      continue
  fi

  # 3. Skip binary files
  if is_binary "$full_path"; then
      debug "Skipping binary file '$rel_path'."
      continue
  fi

  # If all checks pass, add the full path to valid_files
  debug "Including '$rel_path'"
  valid_files+=("$full_path")
done

# Check if we have valid files after all filtering
if [ ${#valid_files[@]} -eq 0 ]; then
  echo "No text files found matching the criteria in '$TARGET_DIR'." >&2
  # Decide if this is an error or just an empty result. Let's treat as non-error.
  exit 0 # Exit successfully with no output
fi

# Process the final list of valid files
if [ "$DRY_RUN" = true ]; then
  # In dry-run mode, just show what would be included
  dry_run_output "$TARGET_DIR" "${valid_files[@]}"
elif [ "$ESTIMATE_TOKENS" = true ]; then
  # In token estimation mode
  estimate_tokens "$TARGET_DIR" "${valid_files[@]}"
else
  # Normal processing mode - Removed clipboard logic
  # if [ "$USE_CLIPBOARD" = true ]; then
  #     # Pipe format_output to copy_to_clipboard
  #     format_output "$TARGET_DIR" "${valid_files[@]}" | copy_to_clipboard
  # else
      format_output "$TARGET_DIR" "${valid_files[@]}"
  # fi
fi

exit 0 